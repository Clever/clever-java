/*
 * Clever API
 * The Clever API
 *
 * OpenAPI spec version: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.EventResponse;
import io.swagger.client.model.EventsResponse;
import io.swagger.client.model.NotFound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    
    /**
     * Retrieves a single event.
     *
     * Returns the specific event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventTest() throws ApiException {
        String id = null;
        EventResponse response = api.getEvent(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves all events
     *
     * Returns a list of events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEvents(limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieves events for schools.
     *
     * Returns a list of events for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsForSchoolTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEventsForSchool(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieves events for school_admins.
     *
     * Returns a list of events for a school admin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsForSchoolAdminTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEventsForSchoolAdmin(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieves events for sections.
     *
     * Returns a list of events for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsForSectionTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEventsForSection(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieves events for students.
     *
     * Returns a list of events for a student
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsForStudentTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEventsForStudent(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieves events for teachers.
     *
     * Returns a list of events for a teacher
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsForTeacherTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        EventsResponse response = api.getEventsForTeacher(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
}
